
a)  [x] Evaluate expresions
        [x] testing
b)  [x] Evaluador basic sentences (no if, no for, no while)
        [ ] testing
c)  [x] Make Programs Evaluator / Interpreter
        [x] entry-point is the file body
d)  [x] Extend parser & eval with alloc and free as builtins (no procs)
e)  [x] Build ascii POC of ui showing state step by step
        [x] show the stack status
        [x] show the heap status
        [x] show code snippet where can be seen what's the line of code just executed, and the next one
f)  [x] Add other basic types (char, bool, real)
        [x] to parser
        [x] to Eval
        [x] to ui
g)  [ ] Details to parsing
        [x] precedencia de operadores
        [ ] mensajes de error apropiados
h)  [x] Agregar Arrays
        [x] to parser
        [x] to Eval
        [.] to ui
i)  [ ] Enums
        [ ] parser
        [ ] Eval
        [ ] ui
j)  [ ] Records/structs
        [ ] parser
        [ ] Eval
        [ ] ui
k)  [ ] types synonims
l)  [x] Expand sentences (if, while)
        [x] parser
        [x] eval
        [x] ui
m)  [ ] For loops
n)  [ ] Better UI
        [ ] Prototype with manim
        [ ] syntax highlight
o)  [ ] Distribution... pypi? website? others?
o)  [ ] Constants as input
p)  [ ] Execution-Modes: unkownvalue, random, others ?


Tech debt:
t1)  [ ] add logging
t2)  [ ] runtime type checking
        [ ] Unary and Binary Operations
        [ ] Assigments
        [Â ] tricky array indexing (valid number of axes and within boundaries)
t3)  [ ] Show gracefull error messages instead of python tracebacks


Not-gonna-happen in this verison:
ex.1) [ ] Add support for procs and functions
ex.2) [ ] Change the definition of entry-point
ex.3) [ ] Static Type Checking
ex.4) [ ] Type Coercion
ex.5) [ ] Classes Ord & Eq
ex.6) [ ] Add support for multi-module programs (imports)
ex.7) [ ] Interactive interpreter


misc:
 - strings?
 - valores booleanos como objetos distintos
 - default values para tipos basicos?
 - donde se usa null?
 - parsear null y/o inf
