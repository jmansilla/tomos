a)  [x] Evaluate expresions
        [x] testing
b)  [x] Evaluator basic sentences (no if, no for, no while)
        [x] testing
c)  [x] Make Programs Evaluator / Interpreter
        [x] entry-point is the file body
d)  [x] Extend parser & eval with alloc and free as builtins (no procs)
e)  [x] Build ascii POC of ui showing state step by step
        [x] show the stack status
        [x] show the heap status
        [x] show code snippet where can be seen what's the line of code just executed, and the next one
f)  [x] Add other basic types (char, bool, real)
        [x] to parser
        [x] to Eval
        [x] to ui
g)  [x] Details to parsing
        [x] operators precedence
h)  [x] Add Arrays
        [x] to parser
        [x] to Eval
           [x] sub-expressions for array indexing
        [x] to ui
i)  [x] Enums
        [x] parser
        [x] Eval
        [x] ui
j)  [x] Records/structs
        [x] parser
        [x] Eval
        [x] ui
k)  [x] types synonyms
l)  [x] Expand sentences (if, while)
        [x] parser
        [x] eval
        [x] ui
m)  [x] For loops
        [x] variable scope, and dynamic visualization (on and off)
        [x] support for integers only
        [ ] ¿support for enums?
n)  [ ] Better UI
        [x] Prototype with manim
        [x] syntax highlight
o)  [ ] Distribution... pypi? website? others?
        [x] basic website for running tomos
        [ ] pypi package
p)  [ ] i18n
        [x] Adapt code messages to be i18n translated
        [ ] Create actual translations
q)  [ ] const environment
        [ ] add syntax for declaring constants
        [ ] make it work with the interpreter (requesting such values from environment)
        [ ] integrate on the website
r)  [x] limit cycles and memory size by parameter (so the web executions survive abusive usage)


Tech debt:
t1)  [.] add logging
t2)  [ ] runtime type checking
        [ ] Unary and Binary Operations
        [ ] Assigments
        [ ] tricky array indexing (valid number of axes and within boundaries)
t3)  [ ] Show gracefull error messages instead of python tracebacks
t4)  [.] Overlapped usage of names (for types, for fields, for vars). Detect, report and finish
        - Half done considering keywords.
        - Missing check vars need to respect a given scope (global or not): when var is declared,
          need to not overlap an existent custom type or some other var
        - Missing considerations respect Enum Literals
t5)  [ ] Replace asserts with descriptfull exceptions
t6)  [ ] Basic Type classes are singletons-like. But weirdly handled.
t7)  [x] Upgrade syntax highlight with types definitions and for loops
t8)  [x] On visitors, remove the kw to simply leave "state" argument.
t9)  [ ] Check can_get_set_values_directly
t10) [x] Test that complex variable compositions works. Examples:
           array_var[1].field_one works
           array_var[other_var + 2]
           array_var[3].field_with_sub_array[i]


Not-gonna-happen in this verison (extra features):
ex.1)  [ ] Add support for procs and functions
ex.2)  [ ] Change the definition of entry-point
ex.3)  [ ] Static Type Checking
ex.4)  [ ] Type Coercion
ex.5)  [ ] Classes Ord & Eq
ex.6)  [ ] Add support for multi-module programs (imports)
ex.7)  [ ] Interactive interpreter
ex.8)  [x] Generate video only with frames explicitly requested ( // checkpoint comment)
ex.9)  [x] If program uses only stack, only draw stack area and not heap
ex.10) [ ] Mark unreachable cells on Heap

misc:
 - strings?
 - valores booleanos como objetos distintos
 - default values para tipos basicos?
 - donde se usa null?
 - parsear null y/o inf
