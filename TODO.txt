
a)  [x] Hacer Evaluador de expresiones
        [x] testing
b)  [x] Hacer evaluador de sentencias básicas (no if, no for, no while)
        [ ] testing
c)  [x] Hacer evaluador de programas
        [x] entry-point es el código del archivo
        [.] type checking dinámico
d)  [x] Extender parser y evaluador con alloc y free como builtins (no procedimientos)
e)  [x] Hacer POC de graficar paso a paso:
        [x] mostrar el estado del Stack
        [x] mostrar estado del Heap
        [x] generar posibilidad de ver un snippet de código donde se muestra qué linea se acaba de ejecutar,
            y cuál sigue
f)  [ ] Agregar otros tipos básicos (char, bool)
        [ ] al parser
        [ ] al Evaluador
        [ ] al graficador
g)  [ ] Agregar Arrays
        [ ] al parser
        [ ] al Evaluador
        [ ] al graficador
h)  [ ] Agregar Enums
        [ ] al parser
        [ ] al Evaluador
        [ ] al graficador
i)  [ ] Agregar records/strucs
        [ ] al parser
        [ ] al Evaluador
        [ ] al graficador
j)  [ ] Completar sentencias (if, for, while)
        [ ] al parser
        [ ] al evaluador
        [ ] al graficador
k)  [ ] Mejorar la UI del graficador / reemplazarlo
        [ ] syntax highlight


Para hacer más adelante (extras)
ex.1) [ ] Agregar procedimientos y funciones
ex.2) [ ] Cambiar la noción de entry-point
ex.3) [ ] Type Checking estático
ex.4) [ ] Coercion de tipos
ex.5) [ ] Clases Ord y Eq
ex.6) [ ] Agregar programas multi-módulo (imports)
ex.7) [ ] Intérprete interactivo?


misc:
 - strings?
 - valores booleanos como objetos distintos
 - default values para tipos basicos?
 - donde se usa null?
 - parsear null y/o inf
 