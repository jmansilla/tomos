// Everything that's defined like <<TYPEDECLARATION>> means to be done later
// Everything in the shape of {some_name} will be replaced in python code

?program           : typedef_section funprocdef_section body
typedef_section    : typedef*
typedef            : "<<TYPEDECLARATION>>"
funprocdef_section : funprocdef*
funprocdef         : "<<FUNPROCDECLARATION>>"
body               : vardef_section sentences
vardef_section     : (var_declaration _SEP)*
var_declaration    : "var" variable ":" type

sentences : (_sentence _SEP)*

_sentence     : SKIP
              | if_sent
              | while_sent
              | builtin_call
              | assignment
SKIP          : "skip"
if_sent       : "if" expr "then" sentences ("else" sentences)? "fi"
while_sent    : "while" expr "do" sentences "od"
assignment    : destination ":=" expr
builtin_call  : builtin_name "(" variable ")"

!builtin_name : "alloc" | "free"

expr            : expr_junction
expr_junction   : expr_equality ( JUNCTION_SYMBOL expr_equality)*
expr_equality   : expr_comparison ( EQUALITY_SYMBOL expr_comparison )*
expr_comparison : expr_term ( COMPARISON_SYMBOL expr_term )*
expr_term       : expr_factor ( TERM_SYMBOL expr_factor )*
expr_factor     : expr_unary ( FACTOR_SYMBOL  expr_unary )*
expr_unary      : UNARY_SYMBOL expr_unary
                | _expr_primary
_expr_primary   : INT | bool_literal | "'"CHAR_LITERAL"'" | REAL
                | INF | NULL
                | address_of | dereferenced_variable | variable
                | "(" expr ")"

// Literals missing from expressions sub-grammar
!bool_literal     : "true" | "false"
INF               : "inf"
NULL              : "null"
CHAR_LITERAL      :  /./
JUNCTION_SYMBOL   : ( "&&" | "||" )
EQUALITY_SYMBOL   : ( "!=" | "==" )
COMPARISON_SYMBOL : ( ">" | ">=" | "<" | "<=" )
TERM_SYMBOL       : ( "-" | "+" )
FACTOR_SYMBOL     : ( "/" | "*" | "%" )
UNARY_SYMBOL      : ( "!" | "-" )

variable              : NAME
address_of            : "&" variable
destination           : variable
                      | dereferenced_variable
dereferenced_variable : "*" variable


type : BASIC_TYPE
     | "pointer of" type -> pointer
     | "array" array_axes "of" type -> array_of

BASIC_TYPE      : "int" | "bool" | "real" | "char"
array_axes      : ("[" array_axis ("," array_axis)* "]")
array_axis      : (array_axis_from "..")? array_axis_to
array_axis_from : INT | variable
array_axis_to   : INT | variable

COMMENT : "//" /[^\n]*/
_SEP    : (";" | NL)  // separator

%import common.CNAME            -> NAME
%import common.INT              -> INT
%import common.FLOAT            -> REAL

%import common.WS
%import common.NEWLINE          -> NL
%ignore WS
%ignore COMMENT
